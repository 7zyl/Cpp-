#include<iostream>
#include<string>
#include<vector>
#include<deque>
#include<stack>
#include<queue>
#include<list>
#include<set>
#include<map>
#include<algorithm>

#define CEHUA 0
#define MEISHU 1
#define YANFA 2

using namespace std;

//公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在哪个部门工作
//员工信息有：姓名，工资组成；部分分为：策划，美术，研发
//随机给10名员工分配部门和工资
//通过multimap进行信息的插入key（部门编号）value（员工）
//分部门显示员工信息

class Worker
{
public:
	string m_name;
	int m_salary;
};

//创建员工
void createWorker(vector<Worker>& v)
{
	string nameseed = "ABCDEFGHIJ";
	for (int i = 0; i < 10; i++)
	{
		Worker worker;
		worker.m_name = "员工";
		worker.m_name += nameseed[i];
		worker.m_salary = rand() % 10000 + 10000;

		v.push_back(worker);
	}
}

//员工分组
void setGroup(vector<Worker>& v, multimap<int, Worker>& m)
{
	for (vector<Worker>::iterator it = v.begin(); it != v.end(); it++)
	{
		//产生随机部门编号
		int deptID = rand() % 3;

		//将员工插入到分组中
		//key部门编号，value部门员工
		m.insert(make_pair(deptID, *it));
	}
}

//分组显示员工
void showWorker(multimap<int, Worker>& m)
{
	cout << "策划部门：" << endl;
	multimap<int, Worker>::iterator pos = m.find(CEHUA);
	int index = 0;
	int count = m.count(CEHUA);			//统计具体人数
	for (pos; pos != m.end() && index < count; pos++, index++)
	{
		cout << "姓名：" << pos->second.m_name << " 工资：" << pos->second.m_salary << endl;
	}

	cout << "-------------------------------" << endl;
	cout << "美术部门：" << endl;
	pos = m.find(MEISHU);
	index = 0;
	count = m.count(MEISHU);			//统计具体人数
	for (pos; pos != m.end() && index < count; pos++, index++)
	{
		cout << "姓名：" << pos->second.m_name << " 工资：" << pos->second.m_salary << endl;
	}

	cout << "-------------------------------" << endl;
	cout << "研发部门：" << endl;
	pos = m.find(YANFA);
	index = 0;
	count = m.count(YANFA);			//统计具体人数
	for (pos; pos != m.end() && index < count; pos++, index++)
	{
		cout << "姓名：" << pos->second.m_name << " 工资：" << pos->second.m_salary << endl;
	}

}

int main()
{
	srand((unsigned int)time(NULL));

	vector<Worker>VWorker;

	//创建员工
	createWorker(VWorker);

	//员工分组
	multimap<int, Worker>MWorker;
	setGroup(VWorker, MWorker);

	//分组显示员工
	showWorker(MWorker);

	system("pause");
	return 0;
}
