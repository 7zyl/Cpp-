#include<iostream>
using namespace std;
#include<string>
class person
{
public:
       person(int age)
       {
              m_age = new int(age);
       }
       ~person()                           //     堆区的空间必须手动释放（析构）
       {                                                 //进而带来浅拷贝问题（堆区重复释放）
              if (m_age != NULL)
              {
                      delete m_age;
                      m_age = NULL;
              }
       }
       //重载赋值运算符
       person& operator=(person& p)
       {
              //编译器提供浅拷贝
              //m_age=p.m_age;
              //应该先判断是否有属性在堆区，如果有先释放干净，然后再深拷贝
              if (m_age != NULL)
              {
                      delete m_age;
                      m_age = NULL;
              }
              //重要：深拷贝
              m_age = new int(*p.m_age);
              return *this;
       }
       int* m_age;
};
void test01()
{
       person p1(18);
       person p2(20);
       p2 = p1;
       cout << "p1的年龄为：" << *p1.m_age << endl;
       cout << "p2的年龄为：" << *p2.m_age << endl;
       person p3(30);
       p3 = p2 = p1;
       cout << "p3的年龄为：" << *p3.m_age << endl;
}
int main()
{
       test01();
       system("pause");
       return 0;
}
